'use strict';

console.log('Hi!');

(function() {

    // api.service.js
    class ApiService {
        constructor(baseURL) {
            this.url = baseURL;
        }

        async fetchItems() {
            try {
                const request = new Request(this.url + '/services.json', {
                    method: 'get'
                });
                const response = await fetch(request);
                return await response.json();
            } catch (error) {
                console.error(error);
            }
        }
    }

    const apiService = new ApiService('https://userconcept.github.io/catalog-glassmorphism');

    // component.js
    class Component {
        constructor(className) {
            this.$el = document.querySelector(className);
            this.init();
        }

        init() {}
    }

    // main.component.js
    class Main extends Component {
        constructor(className) {
            super(className);
        }

        init() {
            this.$el.addEventListener('transitionend', mainTransitionEnd.bind(this));
        }
    }

    function mainTransitionEnd(evt) {
        if (evt.target.classList.contains('main')) {
            document.body.classList.remove('body_planets_animate');
            document.body.classList.add('scroll_off');
            scrollDetect('scroll_add');
        }
    }

    // button-nav.component.js
    class ButtonNav extends Component {
        constructor(className) {
            super(className);
        }

        init() {
            this.$el.addEventListener('click', buttonNavClick.bind(this));
        }
    }

    function buttonNavClick(evt) {
        evt.preventDefault();
        this.$el.classList.toggle('button-nav_active');


        if (this.$el.classList.contains('services__button-nav')) {
            services.active();
        } else {
            nav.active();
        }
    }

    // button-close.component.js
    class ButtonClose extends Component {
        constructor(className) {
            super(className);
        }

        init() {
            this.$el.addEventListener('click', buttonCloseClick.bind(this));
        }
    }

    function buttonCloseClick(evt) {
        evt.preventDefault();
        modalWrapper.hide();
    }

    // nav.component.js
    class Nav extends Component {
        constructor(className) {
            super(className);
        }

        active() {
            this.$el.classList.toggle('nav_active');
        }

        init() {}
    }

    // services.component.js
    class Services extends Component {
        constructor(className) {
            super(className);
        }

        active() {
            this.$el.classList.toggle('services_active');
        }

        init() {}
    }

    // services-list.component.js
    class ServicesListComponent extends Component {
        constructor(className) {
            super(className);
        }

        async init() {
            const data = await apiService.fetchItems();
            const fragment = document.createDocumentFragment();
            const html = data.map(item => fragment.appendChild(renderServicesItem(item)));
            this.$el.appendChild(fragment);
            this.$el.addEventListener('click', servicesListClick);
            window.addEventListener('mousemove', servicesListMousemove);
        }
    }

    function servicesListClick(evt) {
        evt.preventDefault();
        if (evt.target.classList.contains('services-item__link')) {
            document.body.classList.add('body_planets_hide');
            modalWrapper.show();
        }
    }

    let target;

    function servicesListMousemove(evt) {
        if (evt.target.classList.contains('services-item__link')) {
            let dx = 0;
            let dy = 0;
            let rS = 10;
            let itemHover = evt.target.nextElementSibling;
            let { x, y, width, height } = itemHover.getBoundingClientRect();
            let { pageX, pageY } = evt;

            x += width / 2 + window.scrollX;
            y += height / 2 + window.scrollY;

            dx = (x - pageX) / (width / 2);
            dy = (y - pageY) / (height / 2);

            dx = Math.max(-1, Math.min(dx, 1));
            dy = Math.max(-1, Math.min(dy, 1));

            let mD = Math.sqrt(dx ** 2 + dy ** 2)
            itemHover.style.transform = `rotate3d(${dy}, ${-dx}, 0, ${rS * mD}deg)`;

            target = itemHover;

        } else if (target === undefined) {

        } else {
            target.style.transform = '';
        }
    }

    // modal-wrapper.component.js
    class ModalWrapper extends Component {
        constructor(className) {
            super(className);
        }

        show() {
            this.$el.classList.add('modal-wrapper_active');
            this.$el.addEventListener('transitionend', modalWrapperOnShow);
        }

        hide() {
            this.$el.removeEventListener('transitionend', modalWrapperOnShow);
            this.$el.classList.remove('modal-wrapper_active');
            this.$el.ontransitionend = function(evt) {
                if (evt.target.classList.contains('modal-wrapper') && evt.propertyName === 'right') {
                    document.body.classList.remove('scroll_off');
                    scrollDetect('scroll_remove');
                    evt.target.ontransitionend = false;
                }
            };
        }

        init() {}
    }

    function modalWrapperOnShow(evt) {
        if (evt.target.classList.contains('modal-wrapper') && evt.propertyName === 'right') {
            document.body.classList.remove('body_planets_hide');
            document.body.classList.add('body_planets_animate');
        }
    }

    function scrollDetect(param) {
        if (document.body.clientHeight !== document.body.scrollHeight) {
            if (param === 'scroll_add') {
                document.body.classList.add('scroll_true');
            } else {
                document.body.classList.remove('scroll_true');
            }
        }
    }

    // render-services-item.js
    const templateServicesItem = document.querySelector('#t-services-item').content.querySelector('.services-item');

    function renderServicesItem(item) {
        const element = templateServicesItem.cloneNode(true);

        element.querySelector('.services-item__link').textContent = item.title;
        const elementTitle = element.querySelector('.services-item__title');
        elementTitle.textContent = item.title;
        element.querySelector('.services-item__text').textContent = item.text;

        const elementPicture = document.createElement('PICTURE');
        const elementPictureSource = document.createElement('SOURCE');
        const elementPictureImg = document.createElement('IMG');

        elementPicture.classList.add('picture', 'services-item__picture');
        elementPictureSource.type = 'image/webp';
        elementPictureSource.srcset = item.picture.source.small.src + ' ' + item.picture.source.small.descr + ', ' + item.picture.source.middle.src + ' ' + item.picture.source.middle.descr + ', ' + item.picture.source.large.src + ' ' + item.picture.source.large.descr;
        elementPictureSource.sizes = item.picture.sizes;

        elementPictureImg.classList.add('picture__img');
        elementPictureImg.srcset = item.picture.img.small.src + ' ' + item.picture.img.small.descr + ', ' + item.picture.img.middle.src + ' ' + item.picture.img.middle.descr + ', ' + item.picture.img.large.src + ' ' + item.picture.img.large.descr;
        elementPictureImg.sizes = item.picture.sizes;
        elementPictureImg.src = item.picture.img.large.src;
        elementPictureImg.alt = item.picture.alt;

        elementPicture.appendChild(elementPictureSource);
        elementPicture.appendChild(elementPictureImg);

        element.children[1].insertBefore(elementPicture, elementTitle);

        return element;
    };

    // index.js
    const nav = new Nav('.nav');
    const main = new Main('.main');
    const headerButtonNav = new ButtonNav('.header__button-nav');
    const servicesButtonNav = new ButtonNav('.services__button-nav');
    const modalButtonClose = new ButtonClose('.modal__button-close');
    const services = new Services('.services');
    const servicesList = new ServicesListComponent('.services-list');
    const modalWrapper = new ModalWrapper('.modal-wrapper');

})();
